package cucumberOptions;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import io.cucumber.junit.CucumberOptions;
import testComponents.PageUtils;
import testComponents.FileTools;
import testComponents.StepDefCommonFunctions;

import utils.Context;
import io.cucumber.junit.Cucumber;



@RunWith(Cucumber.class)
@CucumberOptions(  
	    features = {"src/test/java/features"},
	    glue={"stepDefinitions"},
	    stepNotifications = true, 
	    monochrome=true,
	   	tags = "@Lat2.0_ST_Vulnerable004",
	    plugin= {"pretty","html:target/cucumberReports/BasicVulnerable.html"}) //,"json:target/cucumber.json","junit:target/cukes.xml"})



public class VulnerabilityJunitTest {
	// A method with annotation @BeforeClass runs at test class initialization time, i.e. before the whole bunch of all tests
	Context context;
	PageUtils pageUtils;
	FileTools fileTools;
	StepDefCommonFunctions StepDefCF;
	static String testReportLiteral = "BasicVulnerable_";


	public VulnerabilityJunitTest(Context context)
	{
		this.context = context;
		pageUtils = context.getPageUtils();
		fileTools = context.getFileTools();
		StepDefCF = context.getStepDefCommonFunctions();
	}

	

	@BeforeClass
	  public static void setupClass() throws Exception  {
	    System.out.println("JUnit BeforeClass hook started");
	    String reportFileName = testReportLiteral+ testComponents.TimeDateCalcs.now("yyyy-MM-dd_HHmmss");
	    testComponents.BaseTest.staticTestMap.put("testReportName",reportFileName);			   
	    testComponents.FileTools.writeTestReport("TestStart");
	  }
	
	
	// A method with annotation @AfterClass runs at test class completion time, i.e. after the whole bunch of all tests
	@AfterClass
	  public static void teardownClass() throws Exception {
	    System.out.println("JUnit AfterClass hook started");
	    testComponents.FileTools.writeTestDataToFile();
	    testComponents.FileTools.writeTestReport("\nTestEnd");
	  }
	
}
